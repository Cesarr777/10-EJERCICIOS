//cesar alexis peñuelas cardenas
//itt
//video https://asciinema.org/a/Zl0rWfcbnnprexoqtkh9naZ0d
.c

#include <stdio.h>
#include <stdlib.h>

// Declaración de la función en ensamblador para calcular el MCD
extern int gcd(int a, int b);

int main() {
    int num1, num2;

    // Solicitar al usuario que ingrese dos números
    printf("Ingrese el primer número: ");
    scanf("%d", &num1);
    printf("Ingrese el segundo número: ");
    scanf("%d", &num2);

    // Llamar a la función en ensamblador para calcular el MCD
    int mcd = gcd(num1, num2);

    // Calcular el MCM usando la fórmula MCM(a, b) = |a * b| / MCD(a, b)
    long long product = (long long)num1 * (long long)num2; // Calcular a * b como long long para evitar desbordamiento
    int mcm = abs(product) / mcd; // Dividir el valor absoluto del producto por el MCD

    // Imprimir solo el resultado del MCM
    printf("El Mínimo Común Múltiplo es: %d\n", mcm);

    return 0;
}

.s

.section .text
.global gcd

// Función gcd
// Entradas: x0 = primer número (a), x1 = segundo número (b)
// Salida: w0 = MCD de a y b
gcd:
    cmp w1, 0                // Comparar b con 0
    beq end_gcd              // Si b es 0, terminar (MCD encontrado en a)

loop:
    udiv w2, w0, w1          // Calcular a / b y guardar en w2
    msub w3, w2, w1, w0      // Calcular a % b usando a - (a / b) * b
    mov w0, w1               // Mover el valor de b a a
    mov w1, w3               // Mover el residuo (a % b) a b
    cmp w1, 0                // Comparar b con 0 nuevamente
    bne loop                 // Repetir el bucle hasta que b sea 0

end_gcd:
    mov w0, w0               // Al terminar, el MCD está en a (en w0)
    ret                      // Retornar el resultado
