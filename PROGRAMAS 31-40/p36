.c

#include <stdio.h>

// Declaración de la función en ensamblador
extern int find_second_largest(int *array, int size);

int main() {
    int size;

    // Solicitar el tamaño del arreglo
    printf("Ingrese el tamaño del arreglo: ");
    scanf("%d", &size);

    // Asegurarse de que el tamaño sea al menos 2
    if (size < 2) {
        printf("El arreglo debe tener al menos 2 elementos.\n");
        return 1;
    }

    int array[size];

    // Solicitar los elementos del arreglo
    printf("Ingrese los elementos del arreglo:\n");
    for (int i = 0; i < size; i++) {
        printf("Elemento %d: ", i);
        scanf("%d", &array[i]);
    }

    // Llamar a la función en ensamblador para encontrar el segundo elemento más grande
    int result = find_second_largest(array, size);

    // Imprimir el resultado
    printf("El segundo elemento más grande es: %d\n", result);

    return 0;
}

.s

.section .text
.global find_second_largest

// Función find_second_largest
// Entradas: x0 = dirección del arreglo, x1 = tamaño del arreglo
// Salida: w0 = segundo elemento más grande
find_second_largest:
    ldr w2, [x0]              // Cargar el primer elemento en w2
    ldr w3, [x0, #4]          // Cargar el segundo elemento en w3

    cmp w2, w3                // Comparar los primeros dos elementos
    b.gt set_initial_values   // Si w2 > w3, continuar
    mov w4, w2                // Si w3 es más grande, w4 = w2 (segundo más grande)
    mov w2, w3                // y w2 = w3 (más grande)
    b continue_search

set_initial_values:
    mov w4, w3                // Si w2 es más grande, w4 = w3 (segundo más grande)

continue_search:
    mov x5, 2                 // Comenzar desde el tercer elemento (usar x5 en vez de w5 para cálculo de direcciones)

loop:
    cmp x5, x1                // Verificar si alcanzamos el final del arreglo
    bge end_search            // Si alcanzamos el final, terminar

    ldr w6, [x0, x5, LSL #2]  // Cargar el siguiente elemento en w6

    cmp w6, w2                // Comparar w6 con el máximo actual (w2)
    b.lt check_second_largest // Si w6 < w2, verificar si es el segundo más grande

    mov w4, w2                // Si w6 > w2, actualizar el segundo más grande a w2
    mov w2, w6                // y actualizar el máximo a w6
    b next_element            // Continuar con el siguiente elemento

check_second_largest:
    cmp w6, w4                // Comparar w6 con el segundo más grande actual (w4)
    b.le next_element         // Si w6 <= w4, no hay cambios

    mov w4, w6                // Si w6 es mayor que el segundo más grande, actualizar w4

next_element:
    add x5, x5, 1             // Avanzar al siguiente elemento (usar x5 para evitar errores de desplazamiento)
    b loop                    // Repetir el bucle

end_search:
    mov w0, w4                // Al final, w4 contiene el segundo elemento más grande
    ret                       // Retornar el resultado
