.c

#include <stdio.h>

// Declaración de la función en ensamblador
extern void reverse_array(int *array, int size);

int main() {
    int size;

    // Solicitar el tamaño del arreglo
    printf("Ingrese el tamaño del arreglo: ");
    scanf("%d", &size);

    int array[size];

    // Solicitar los elementos del arreglo
    printf("Ingrese los elementos del arreglo:\n");
    for (int i = 0; i < size; i++) {
        printf("Elemento %d: ", i);
        scanf("%d", &array[i]);
    }

    // Llamar a la función en ensamblador para invertir el arreglo
    reverse_array(array, size);

    // Imprimir el arreglo invertido
    printf("Arreglo invertido:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    return 0;
}

.s

.section .text
.global reverse_array

// Función reverse_array
// Entradas: x0 = dirección del arreglo, x1 = tamaño del arreglo
// Salida: El arreglo queda invertido en la misma dirección de memoria
reverse_array:
    mov w2, 0                 // Índice inicial (inicio del arreglo)
    sub w1, w1, 1             // Índice final (último elemento) -> w1 = size - 1

reverse_loop:
    cmp w2, w1                // Comparar índices (inicio >= fin)
    bge end_reverse           // Si se cruzan, terminar

    // Intercambiar array[w2] y array[w1]
    mov x3, x2                // Mover w2 a x3 para uso en cálculos de dirección
    mov x4, x1                // Mover w1 a x4 para uso en cálculos de dirección
    lsl x3, x3, 2             // Multiplicar índice w2 por 4 para obtener la dirección (tamaño de int)
    lsl x4, x4, 2             // Multiplicar índice w1 por 4 para obtener la dirección

    ldr w5, [x0, x3]          // Cargar array[w2] en w5
    ldr w6, [x0, x4]          // Cargar array[w1] en w6
    str w6, [x0, x3]          // Guardar array[w1] en array[w2]
    str w5, [x0, x4]          // Guardar array[w2] en array[w1]

    add w2, w2, 1             // Incrementar índice inicial
    sub w1, w1, 1             // Decrementar índice final
    b reverse_loop            // Repetir el bucle

end_reverse:
    ret                       // Terminar la función
